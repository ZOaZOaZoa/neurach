digraph nncp0pn {
  graph [ rankdir = LR ] ;
  node [ shape = record ] ;

  setpnt_inp:out -> chkpnt_r:in ;
  setpnt_inp [
    label="setpnt_inp|{{<out>out}}"
  ] ;
  chkpnt_r [
    label="chkpnt_r|{{<in>in}|{<out>out}}"
  ] ;
  chkpnt_r:out -> cmp:main ;
  cmp [
    label="cmp|{{<main>main|<aux>aux}|{<cmp>cmp}}"
  ] ;
  cmp:cmp -> chkpnt_e:in ;
  chkpnt_e [
    label="chkpnt_e|{{<in>in}|{<out>out}}"
  ] ;
  chkpnt_r:out -> bus3:in1 ;
  bus3 [
    label="bus3|{{<in1>in1|<in2>in2|<in3>in3}|{<out>out}}"
  ] ;
  chkpnt_e:out -> bus3:in2 ;
  chkpnt_e:out -> err_acc:in ;
  err_acc [
    label="err_acc|{{<in>in}|{<sum>sum}}"
  ] ;
  err_acc:sum -> bus3:in3 ;
  bus3:out -> controller:x ;
  controller [
    label="controller|{{<x>x|<time>time}|{<y>y}}"
  ] ;
  bus3:out -> nn_x:in ;
  nn_x [
    label="nn_x|{{<in>in}}"
  ] ;
  controller:y -> chkpnt_u:in ;
  chkpnt_u [
    label="chkpnt_u|{{<in>in}|{<out>out}}"
  ] ;
  chkpnt_u:out -> plant:x ;
  plant [
    label="plant|{{<x>x|<time>time}|{<y>y}}"
  ] ;
  plant:y -> chkpnt_y:in ;
  chkpnt_y [
    label="chkpnt_y|{{<in>in}|{<out>out}}"
  ] ;
  chkpnt_y:out -> onsum:main ;
  onsum [
    label="onsum|{{<main>main|<aux>aux}|{<sum>sum}}"
  ] ;
  onsum:sum -> chkpnt_ny:in ;
  chkpnt_ny [
    label="chkpnt_ny|{{<in>in}|{<out>out}}"
  ] ;
  noise_inp:out -> chkpnt_n:in ;
  noise_inp [
    label="noise_inp|{{<out>out}}"
  ] ;
  chkpnt_n [
    label="chkpnt_n|{{<in>in}|{<out>out}}"
  ] ;
  chkpnt_ny:out -> cmp:aux ;
  chkpnt_ny:out -> skip_y:in ;
  skip_y [
    label="skip_y|{{<in>in}|{<out>out|<sync>sync}}"
  ] ;
  chkpnt_u:out -> skip_u:in ;
  skip_u [
    label="skip_u|{{<in>in}|{<out>out|<sync>sync}}"
  ] ;
  skip_y:out -> delay_y:in ;
  delay_y [
    label="delay_y|{{<in>in}|{<dout>dout|<sync>sync}}"
  ] ;
  skip_u:out -> delay_u:in ;
  delay_u [
    label="delay_u|{{<in>in}|{<dout>dout|<sync>sync}}"
  ] ;
  delay_u:dout -> bus_p:in1 ;
  bus_p [
    label="bus_p|{{<in1>in1|<in2>in2}|{<out>out}}"
  ] ;
  delay_y:dout -> bus_p:in2 ;
  bus_p:out -> nnplant:x ;
  nnplant [
    label="nnplant|{{<x>x}|{<y>y}}"
  ] ;
  nnplant:y -> fill_nn_y:in ;
  fill_nn_y [
    label="fill_nn_y|{{<in>in}|{<out>out|<sync>sync}}"
  ] ;
  chkpnt_ny:out -> iderrcomp:aux ;
  iderrcomp [
    label="iderrcomp|{{<main>main|<aux>aux}|{<cmp>cmp}}"
  ] ;
  fill_nn_y:out -> iderrcomp:main ;
  iderrcomp:cmp -> statan_iderr:signal ;
  statan_iderr [
    label="statan_iderr|{{<signal>signal}|{<stat>stat}}"
  ] ;
  iderrcomp:cmp -> nn_e:in ;
  nn_e [
    label="nn_e|{{<in>in}}"
  ] ;
  statan_iderr:stat -> iderr_fout:in ;
  iderr_fout [
    label="iderr_fout|{{<in>in}}"
  ] ;
  fill_nn_y:out -> nn_y:in ;
  nn_y [
    label="nn_y|{{<in>in}}"
  ] ;
  iderrcomp:cmp -> cusum:x ;
  cusum [
    label="cusum|{{<x>x}|{<d>d|<sum>sum}}"
  ] ;
  cusum:sum -> cusum_out:in ;
  cusum_out [
    label="cusum_out|{{<in>in}}"
  ] ;
  cusum:d -> dodetect:events ;
  dodetect [
    label="dodetect|{{<events>events}}"
  ] ;
  chkpnt_n:out -> onsum:aux ;
  chkpnt_r:out -> cmp_e:main ;
  cmp_e [
    label="cmp_e|{{<main>main|<aux>aux}|{<cmp>cmp}}"
  ] ;
  plant:y -> cmp_e:aux ;
  cmp_e:cmp -> statan_cerr:signal ;
  statan_cerr [
    label="statan_cerr|{{<signal>signal}|{<stat>stat}}"
  ] ;
  statan_cerr:stat -> cerr_fout:in ;
  cerr_fout [
    label="cerr_fout|{{<in>in}}"
  ] ;
  chkpnt_r:out -> skip_r:in ;
  skip_r [
    label="skip_r|{{<in>in}|{<out>out|<sync>sync}}"
  ] ;
  nnplant:y -> nnpback:nnout ;
  nnpback [
    label="nnpback|{{<nnout>nnout|<desout>desout|<errout>errout}|{<errinp>errinp}}"
  ] ;
  skip_r:out -> nnpback:desout ;
  nnpback:errinp -> nnp_bpe:in ;
  nnp_bpe [
    label="nnp_bpe|{{<in>in}}"
  ] ;
  chkpnt_r:out -> statan_r:signal ;
  statan_r [
    label="statan_r|{{<signal>signal}|{<stat>stat}}"
  ] ;
}
